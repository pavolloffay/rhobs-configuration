apiVersion: v1
kind: Template
metadata:
  name: observatorium
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: avalanche
      app.kubernetes.io/name: avalanche-remote-writer
      app.kubernetes.io/part-of: observatorium
    name: avalanche-remote-writer
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: avalanche
        app.kubernetes.io/name: avalanche-remote-writer
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: avalanche
          app.kubernetes.io/name: avalanche-remote-writer
          app.kubernetes.io/part-of: observatorium
      spec:
        containers:
        - args:
          - --metric-count=1
          - --series-count=8333
          - --remote-url=http://observatorium-thanos-receive.${OBSERVATORIUM_METRICS_NAMESPACE}.svc.cluster.local:19291/api/v1/receive
          - --remote-write-interval=30s
          - --remote-requests-count=1000000
          - --value-interval=3600
          - --series-interval=315360000
          - --metric-interval=315360000
          - --remote-tenant-header=THANOS-TENANT
          - --remote-tenant=0fc2b00e-201b-4c17-b9f2-19d91adc4fd2
          image: quay.io/observatorium/avalanche:make-tenant-header-configurable-2021-10-07-0a2cbf5
          name: avalanche-remote-writer
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: api-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-api-cache-memcached
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: api-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: api-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-api-cache-memcached
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-api-cache-memcached
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: api-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: api-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-api-cache-memcached
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: api-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-api-cache-memcached
    template:
      metadata:
        labels:
          app.kubernetes.io/component: api-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: memcached
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m ${MEMCACHED_MEMORY_LIMIT_MB}
          - -I 5m
          - -c ${MEMCACHED_CONNECTION_LIMIT}
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          resources:
            limits:
              cpu: ${MEMCACHED_CPU_LIMIT}
              memory: ${MEMCACHED_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_CPU_REQUEST}
              memory: ${MEMCACHED_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          resources:
            limits:
              cpu: ${MEMCACHED_EXPORTER_CPU_LIMIT}
              memory: ${MEMCACHED_EXPORTER_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_EXPORTER_CPU_REQUEST}
              memory: ${MEMCACHED_EXPORTER_MEMORY_REQUEST}
        securityContext: {}
        serviceAccountName: observatorium-api-cache-memcached
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: rules-storage
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: rules-objstore
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${RULES_OBJSTORE_IMAGE_TAG}
    name: rules-objstore
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: rules-storage
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: rules-objstore
        app.kubernetes.io/part-of: observatorium
    strategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rules-storage
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: rules-objstore
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${RULES_OBJSTORE_IMAGE_TAG}
      spec:
        containers:
        - args:
          - --debug.name=rules-objstore
          - --web.listen=0.0.0.0:8080
          - --web.internal.listen=0.0.0.0:8081
          - --web.healthchecks.url=http://localhost:8080
          - --log.level=info
          - --log.format=logfmt
          - --objstore.config-file=/etc/rules-objstore/objstore.yaml
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${RULES_OBJSTORE_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${RULES_OBJSTORE_S3_SECRET}
          image: ${RULES_OBJSTORE_IMAGE}:${RULES_OBJSTORE_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /live
              port: 8081
              scheme: HTTP
            periodSeconds: 30
          name: rules-objstore
          ports:
          - containerPort: 8081
            name: internal
          - containerPort: 8080
            name: public
          readinessProbe:
            failureThreshold: 12
            httpGet:
              path: /ready
              port: 8081
              scheme: HTTP
            periodSeconds: 5
          resources: {}
          volumeMounts:
          - mountPath: /etc/rules-objstore/objstore.yaml
            name: objstore
            readOnly: true
            subPath: objstore.yaml
        serviceAccountName: rules-objstore
        volumes:
        - name: objstore
          secret:
            secretName: ${RULES_OBJSTORE_SECRET}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rules-storage
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: rules-objstore
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${RULES_OBJSTORE_IMAGE_TAG}
    name: rules-objstore
  spec:
    ports:
    - name: internal
      port: 8081
      targetPort: 8081
    - name: public
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: rules-storage
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: rules-objstore
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: rules-storage
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: rules-objstore
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${RULES_OBJSTORE_IMAGE_TAG}
    name: rules-objstore
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: rules-objstore
  spec:
    endpoints:
    - port: internal
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rules-storage
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: rules-objstore
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    queries.yaml: |-
      "queries":
      - "name": "query-path-sli-1M-samples"
        "query": "avg_over_time(avalanche_metric_mmmmm_0_0{tenant_id=\"0fc2b00e-201b-4c17-b9f2-19d91adc4fd2\"}[1h])"
      - "name": "query-path-sli-10M-samples"
        "query": "avg_over_time(avalanche_metric_mmmmm_0_0{tenant_id=\"0fc2b00e-201b-4c17-b9f2-19d91adc4fd2\"}[10h])"
      - "name": "query-path-sli-100M-samples"
        "query": "avg_over_time(avalanche_metric_mmmmm_0_0{tenant_id=\"0fc2b00e-201b-4c17-b9f2-19d91adc4fd2\"}[100h])"
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/component: blackbox-prober
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-up
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-2022-03-24-098c31a
    name: observatorium-observatorium-up
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: blackbox-prober
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-up
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-2022-03-24-098c31a
    name: observatorium-observatorium-up
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: blackbox-prober
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-up
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: blackbox-prober
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: observatorium-up
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: master-2022-03-24-098c31a
      spec:
        containers:
        - args:
          - --duration=0
          - --log.level=debug
          - --endpoint-type=metrics
          - --queries-file=/etc/up/queries.yaml
          - --endpoint-read=http://observatorium-thanos-query-frontend.${OBSERVATORIUM_METRICS_NAMESPACE}.svc:9090
          image: quay.io/observatorium/up:master-2022-03-24-098c31a
          name: observatorium-up
          ports:
          - containerPort: 8080
            name: http
          resources:
            limits:
              cpu: ${UP_CPU_LIMIT}
              memory: ${UP_MEMORY_LIMIT}
            requests:
              cpu: ${UP_CPU_REQUEST}
              memory: ${UP_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/up/
            name: query-config
            readOnly: false
        volumes:
        - configMap:
            name: observatorium-observatorium-up
          name: query-config
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: blackbox-prober
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-up
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: master-2022-03-24-098c31a
    name: observatorium-observatorium-up
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: blackbox-prober
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-up
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-up
  spec:
    endpoints:
    - port: http
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: blackbox-prober
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-up
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    rbac.yaml: |-
      "roleBindings":
      - "name": "cnv-qe-metrics"
        "roles":
        - "cnv-qe-metrics-write"
        - "cnv-qe-metrics-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-cnv-qe-staging"
        - "kind": "user"
          "name": "service-account-observatorium-cnv-qe"
      - "name": "rhods-metrics"
        "roles":
        - "rhods-metrics-write"
        - "rhods-metrics-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-rhods-isv-staging"
      - "name": "rhacs-metrics"
        "roles":
        - "rhacs-metrics-write"
        - "rhacs-metrics-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-rhacs-metrics-staging"
        - "kind": "user"
          "name": "service-account-observatorium-rhacs-metrics"
      - "name": "rhacs-metrics-grafana"
        "roles":
        - "rhacs-metrics-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-rhacs-grafana-staging"
        - "kind": "user"
          "name": "service-account-observatorium-rhacs-grafana"
      - "name": "rhacs-logs"
        "roles":
        - "rhacs-logs-read"
        - "rhacs-logs-write"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-rhacs-logs-staging"
        - "kind": "user"
          "name": "service-account-observatorium-rhacs-logs"
      - "name": "rhobs"
        "roles":
        - "rhobs-write"
        - "rhobs-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-rhobs-testing"
        - "kind": "user"
          "name": "service-account-observatorium-rhobs-staging"
        - "kind": "user"
          "name": "service-account-observatorium-rhobs"
      - "name": "rhobs-mst"
        "roles":
        - "rhobs-write"
        - "rhobs-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-rhobs-mst-staging"
        - "kind": "user"
          "name": "service-account-observatorium-rhobs-mst"
      - "name": "rhobs-admin"
        "roles":
        - "telemeter-read"
        - "rhobs-read"
        "subjects":
        - "kind": "group"
          "name": "team-monitoring@redhat.com"
      - "name": "telemeter-server"
        "roles":
        - "telemeter-write"
        - "telemeter-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-telemeter-service-staging"
        - "kind": "user"
          "name": "service-account-telemeter-service"
      - "name": "subwatch"
        "roles":
        - "telemeter-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-subwatch-staging"
        - "kind": "user"
          "name": "service-account-observatorium-subwatch"
      - "name": "psiocp"
        "roles":
        - "psiocp-write"
        - "psiocp-read"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-psiocp-staging"
      - "name": "rhoc"
        "roles":
        - "rhoc-metrics-read"
        - "rhoc-metrics-write"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-rhoc-staging"
      - "name": "odfms"
        "roles":
        - "odfms-metrics-read"
        - "odfms-metrics-write"
        "subjects":
        - "kind": "user"
          "name": "service-account-observatorium-odfms-staging"
      "roles":
      - "name": "cnv-qe-metrics-read"
        "permissions":
        - "read"
        "resources":
        - "metrics"
        "tenants":
        - "cnvqe"
      - "name": "cnv-qe-metrics-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        "tenants":
        - "cnvqe"
      - "name": "rhods-metrics-read"
        "permissions":
        - "read"
        "resources":
        - "metrics"
        "tenants":
        - "rhods"
      - "name": "rhods-metrics-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        "tenants":
        - "rhods"
      - "name": "rhods-logs-read"
        "permissions":
        - "read"
        "resources":
        - "logs"
        "tenants":
        - "rhods"
      - "name": "rhods-logs-write"
        "permissions":
        - "write"
        "resources":
        - "logs"
        "tenants":
        - "rhods"
      - "name": "rhacs-metrics-read"
        "permissions":
        - "read"
        "resources":
        - "metrics"
        "tenants":
        - "rhacs"
      - "name": "rhacs-metrics-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        "tenants":
        - "rhacs"
      - "name": "rhacs-logs-write"
        "permissions":
        - "write"
        "resources":
        - "logs"
        "tenants":
        - "rhacs"
      - "name": "rhacs-logs-read"
        "permissions":
        - "read"
        "resources":
        - "logs"
        "tenants":
        - "rhacs"
      - "name": "rhobs-read"
        "permissions":
        - "read"
        "resources":
        - "metrics"
        - "logs"
        - "traces"
        "tenants":
        - "rhobs"
      - "name": "rhobs-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        - "logs"
        - "traces"
        "tenants":
        - "rhobs"
      - "name": "telemeter-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        "tenants":
        - "telemeter"
      - "name": "telemeter-read"
        "permissions":
        - "read"
        "resources":
        - "metrics"
        "tenants":
        - "telemeter"
      - "name": "psiocp-read"
        "permissions":
        - "read"
        "resources":
        - "metrics"
        "tenants":
        - "psiocp"
      - "name": "psiocp-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        "tenants":
        - "psiocp"
      - "name": "rhoc-metrics-read"
        "permissions":
        - "read"
        "resources":
        - "metrics"
        "tenants":
        - "rhoc"
      - "name": "rhoc-metrics-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        "tenants":
        - "rhoc"
      - "name": "odfms-metrics-read"
        "permissions":
        - "read"
        "resources":
        - "metrics"
        "tenants":
        - "odfms"
      - "name": "odfms-metrics-write"
        "permissions":
        - "write"
        "resources":
        - "metrics"
        "tenants":
        - "odfms"
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: ${OBSERVATORIUM_API_IDENTIFIER}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: ${OBSERVATORIUM_API_IDENTIFIER}
  spec:
    replicas: ${{OBSERVATORIUM_API_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-api
        app.kubernetes.io/part-of: observatorium
    strategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: api
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: observatorium-api
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
      spec:
        containers:
        - args:
          - --web.listen=0.0.0.0:8080
          - --web.internal.listen=0.0.0.0:8081
          - --log.level=warn
          - --metrics.read.endpoint=http://observatorium-thanos-query-frontend.${OBSERVATORIUM_METRICS_NAMESPACE}.svc.cluster.local:9090
          - --metrics.write.endpoint=http://observatorium-thanos-receive.${OBSERVATORIUM_METRICS_NAMESPACE}.svc.cluster.local:19291
          - --metrics.rules.endpoint=http://rules-objstore.${NAMESPACE}.svc.cluster.local:8080
          - --logs.read.endpoint=http://observatorium-loki-query-frontend-http.${OBSERVATORIUM_LOGS_NAMESPACE}.svc.cluster.local:3100
          - --logs.tail.endpoint=http://observatorium-loki-querier-http.${OBSERVATORIUM_LOGS_NAMESPACE}.svc.cluster.local:3100
          - --logs.write.endpoint=http://observatorium-loki-distributor-http.${OBSERVATORIUM_LOGS_NAMESPACE}.svc.cluster.local:3100
          - --traces.write.endpoint=observatorium-otel-collector-headless.${OBSERVATORIUM_TRACES_NAMESPACE}.svc.cluster.local:4317
          - --grpc.listen=0.0.0.0:8090
          - --rbac.config=/etc/observatorium/rbac.yaml
          - --tenants.config=/etc/observatorium/tenants.yaml
          - --middleware.rate-limiter.grpc-address=observatorium-gubernator.${NAMESPACE}.svc.cluster.local:8081
          - --internal.tracing.endpoint=localhost:6831
          image: ${OBSERVATORIUM_API_IMAGE}:${OBSERVATORIUM_API_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /live
              port: 8081
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-api
          ports:
          - containerPort: 8090
            name: grpc-public
          - containerPort: 8081
            name: internal
          - containerPort: 8080
            name: public
          readinessProbe:
            failureThreshold: 12
            httpGet:
              path: /ready
              port: 8081
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${OBSERVATORIUM_API_CPU_LIMIT}
              memory: ${OBSERVATORIUM_API_MEMORY_LIMIT}
            requests:
              cpu: ${OBSERVATORIUM_API_CPU_REQUEST}
              memory: ${OBSERVATORIUM_API_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/observatorium/rbac.yaml
            name: rbac
            readOnly: true
            subPath: rbac.yaml
          - mountPath: /etc/observatorium/tenants.yaml
            name: tenants
            readOnly: true
            subPath: tenants.yaml
        - args:
          - --web.listen=127.0.0.1:8082
          - --web.internal.listen=0.0.0.0:8083
          - --web.healthchecks.url=http://127.0.0.1:8082
          - --log.level=warn
          - --ams.url=${AMS_URL}
          - --resource-type-prefix=observatorium
          - --oidc.client-id=$(CLIENT_ID)
          - --oidc.client-secret=$(CLIENT_SECRET)
          - --oidc.issuer-url=$(ISSUER_URL)
          - --opa.package=observatorium
          - --memcached=observatorium-api-cache-memcached.${NAMESPACE}.svc.cluster.local:11211
          - --memcached.expire=${OPA_AMS_MEMCACHED_EXPIRE}
          - --ams.mappings=cnvqe=${CNVQE_ORGANIZATION_ID}
          - --ams.mappings=dptp=${DPTP_ORGANIZATION_ID}
          - --ams.mappings=managedkafka=${MANAGEDKAFKA_ORGANIZATION_ID}
          - --ams.mappings=osd=${OSD_ORGANIZATION_ID}
          - --internal.tracing.endpoint=localhost:6831
          env:
          - name: ISSUER_URL
            valueFrom:
              secretKeyRef:
                key: issuer-url
                name: ${OBSERVATORIUM_API_IDENTIFIER}
          - name: CLIENT_ID
            valueFrom:
              secretKeyRef:
                key: client-id
                name: ${OBSERVATORIUM_API_IDENTIFIER}
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: client-secret
                name: ${OBSERVATORIUM_API_IDENTIFIER}
          image: ${OPA_AMS_IMAGE}:${OPA_AMS_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /live
              port: 8083
              scheme: HTTP
            periodSeconds: 30
          name: opa-ams
          ports:
          - containerPort: 8082
            name: opa-ams-api
          - containerPort: 8083
            name: opa-ams-metrics
          readinessProbe:
            failureThreshold: 12
            httpGet:
              path: /ready
              port: 8083
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${OPA_AMS_CPU_LIMIT}
              memory: ${OPA_AMS_MEMORY_LIMIT}
            requests:
              cpu: ${OPA_AMS_CPU_REQUEST}
              memory: ${OPA_AMS_MEMORY_REQUEST}
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: ${OBSERVATORIUM_API_IDENTIFIER}
          name: rbac
        - name: tenants
          secret:
            secretName: ${OBSERVATORIUM_API_IDENTIFIER}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: ${OBSERVATORIUM_API_IDENTIFIER}
  stringData:
    client-id: test
    client-secret: ZXhhbXBsZS1hcHAtc2VjcmV0
    issuer-url: http://dex.dex.svc.cluster.local:5556/dex
    tenants.yaml: |-
      "tenants":
      - "id": "770c1124-6ae8-4324-a9d4-9ce08590094b"
        "name": "rhobs"
        "oidc":
          "clientID": "test"
          "clientSecret": "ZXhhbXBsZS1hcHAtc2VjcmV0"
          "issuerURL": "http://dex.dex.svc.cluster.local:5556/dex"
          "usernameClaim": "email"
      - "id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
        "name": "telemeter"
        "oidc":
          "clientID": "test"
          "clientSecret": "ZXhhbXBsZS1hcHAtc2VjcmV0"
          "issuerURL": "http://dex.dex.svc.cluster.local:5556/dex"
          "usernameClaim": "email"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: ${OBSERVATORIUM_API_IDENTIFIER}
  spec:
    ports:
    - appProtocol: h2c
      name: grpc-public
      port: 8090
      targetPort: 8090
    - appProtocol: http
      name: internal
      port: 8081
      targetPort: 8081
    - appProtocol: http
      name: public
      port: 8080
      targetPort: 8080
    - name: opa-ams-api
      port: 8082
      targetPort: 8082
    - name: opa-ams-metrics
      port: 8083
      targetPort: 8083
    selector:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: observatorium-api
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${OBSERVATORIUM_API_IMAGE_TAG}
    name: ${OBSERVATORIUM_API_IDENTIFIER}
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-api
  spec:
    endpoints:
    - port: internal
    - port: opa-ams-metrics
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: observatorium-api
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
  spec:
    replicas: ${{GUBERNATOR_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rate-limiter
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: gubernator
        app.kubernetes.io/part-of: observatorium
    strategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rate-limiter
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: gubernator
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
      spec:
        containers:
        - env:
          - name: GUBER_K8S_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: GUBER_K8S_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: GUBER_HTTP_ADDRESS
            value: 0.0.0.0:8080
          - name: GUBER_GRPC_ADDRESS
            value: 0.0.0.0:8081
          - name: GUBER_K8S_POD_PORT
            value: "8081"
          - name: GUBER_K8S_ENDPOINTS_SELECTOR
            value: app.kubernetes.io/name=gubernator
          image: ${GUBERNATOR_IMAGE}:${GUBERNATOR_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: gubernator
          ports:
          - containerPort: 8081
            name: grpc
          - containerPort: 8080
            name: http
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/HealthCheck
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 1
          resources:
            limits:
              cpu: ${GUBERNATOR_CPU_LIMIT}
              memory: ${GUBERNATOR_MEMORY_LIMIT}
            requests:
              cpu: ${GUBERNATOR_CPU_REQUEST}
              memory: ${GUBERNATOR_MEMORY_REQUEST}
        restartPolicy: Always
        serviceAccountName: observatorium-gubernator
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: observatorium-gubernator
  subjects:
  - kind: ServiceAccount
    name: observatorium-gubernator
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
  spec:
    ports:
    - name: grpc
      port: 8081
      targetPort: 8081
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: rate-limiter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: gubernator
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${GUBERNATOR_IMAGE_TAG}
    name: observatorium-gubernator
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-gubernator
  spec:
    endpoints:
    - port: http
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rate-limiter
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: gubernator
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    session_secret: c2VjcmV0
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: compact-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: compact-tls
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-compact
  spec:
    clusterIP: None
    ports:
    - name: http
      port: 10902
      targetPort: 10902
    - name: https
      port: 8443
      targetPort: 8443
    selector:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-compact
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-compact
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-compact
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: database-compactor
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-compact
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-compact
  spec:
    replicas: ${{THANOS_COMPACTOR_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-compactor
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-compact
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-compact
    template:
      metadata:
        labels:
          app.kubernetes.io/component: database-compactor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-compact
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-compact
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - compact
          - --wait
          - --log.level=${THANOS_COMPACTOR_LOG_LEVEL}
          - --log.format=logfmt
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/compact
          - --debug.accept-malformed-index
          - --retention.resolution-raw=${THANOS_COMPACTOR_RETENTION_RESOLUTION_RAW}
          - --retention.resolution-5m=${THANOS_COMPACTOR_RETENTION_RESOLUTION_FIVE_MINUTES}
          - --retention.resolution-1h=${THANOS_COMPACTOR_RETENTION_RESOLUTION_ONE_HOUR}
          - --delete-delay=48h
          - --compact.concurrency=1
          - --downsample.concurrency=1
          - --deduplication.replica-label=replica
          - --debug.max-compaction-level=3
          - ${THANOS_COMPACTOR_RETENTION_DISABLE_DOWNSAMPLING}
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-compact
          ports:
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_COMPACTOR_CPU_LIMIT}
              memory: ${THANOS_COMPACTOR_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_COMPACTOR_CPU_REQUEST}
              memory: ${THANOS_COMPACTOR_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/compact
            name: data
            readOnly: false
        - args:
          - -provider=openshift
          - -https-address=:8443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:10902
          - -openshift-service-account=${SERVICE_ACCOUNT_NAME}
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${OAUTH_PROXY_IMAGE}:${OAUTH_PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: compact-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: compact-proxy
            readOnly: false
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        terminationGracePeriodSeconds: 120
        volumes:
        - name: compact-tls
          secret:
            secretName: compact-tls
        - name: compact-proxy
          secret:
            secretName: compact-proxy
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: database-compactor
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-compact
          app.kubernetes.io/part-of: observatorium
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${THANOS_COMPACTOR_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-metric-federation-rule
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: reloader
      port: 9533
      targetPort: 9533
    selector:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-metric-federation-rule
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-metric-federation-rule
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    - port: reloader
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: metric-federation
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-metric-federation-rule
  spec:
    replicas: ${{THANOS_RULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: metric-federation
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-metric-federation-rule
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: metric-federation
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - rule
          - --log.level=${THANOS_RULER_LOG_LEVEL}
          - --log.format=logfmt
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/rule
          - --label=rule_replica="$(NAME)"
          - --alert.label-drop=rule_replica
          - --tsdb.retention=48h
          - --tsdb.block-duration=2h
          - --query=dnssrv+_http._tcp.observatorium-thanos-query.${THANOS_QUERIER_NAMESPACE}.svc.cluster.local
          - --rule-file=/etc/thanos/rules/metric-federation-rules/observatorium.yaml
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-rule"
            "type": "JAEGER"
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 24
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          name: thanos-rule
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          - containerPort: 9533
            name: reloader
          readinessProbe:
            failureThreshold: 18
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_RULER_CPU_LIMIT}
              memory: ${THANOS_RULER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RULER_CPU_REQUEST}
              memory: ${THANOS_RULER_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/rule
            name: data
            readOnly: false
          - mountPath: /etc/thanos/rules/metric-federation-rules
            name: metric-federation-rules
        - args:
          - -webhook-url=http://localhost:10902/-/reload
          - -volume-dir=/etc/thanos/rules/metric-federation-rules
          image: ${CONFIGMAP_RELOADER_IMAGE}:${CONFIGMAP_RELOADER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: configmap-reloader
          volumeMounts:
          - mountPath: /etc/thanos/rules/metric-federation-rules
            name: metric-federation-rules
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: metric-federation-rules
          name: metric-federation-rules
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: metric-federation
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${THANOS_RULER_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  data:
    observatorium.yaml: |-
      "groups":
      - "interval": "1m"
        "name": "telemeter-kafka.rules"
        "rules":
        - "expr": |
            kafka_id:strimzi_resource_state:max_over_time1h
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "kafka_id:strimzi_resource_state:max_over_time1h"
        - "expr": |
            kafka_id:haproxy_server_bytes_in_total:rate1h_gibibytes
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "kafka_id:haproxy_server_bytes_in_total:rate1h_gibibytes"
        - "expr": |
            kafka_id:haproxy_server_bytes_out_total:rate1h_gibibytes
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "kafka_id:haproxy_server_bytes_out_total:rate1h_gibibytes"
        - "expr": |
            kafka_id:kafka_broker_quota_totalstorageusedbytes:max_over_time1h_gibibytes
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "kafka_id:kafka_broker_quota_totalstorageusedbytes:max_over_time1h_gibibytes"
        - "expr": |
            kafka_id:haproxy_server_bytes_in_out_total:rate1h_gibibytes
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "kafka_id:haproxy_server_bytes_in_out_total:rate1h_gibibytes"
      - "interval": "1m"
        "name": "telemeter-rhacs.rules"
        "rules":
        - "expr": |
            rhacs:rox_central_cluster_metrics_cpu_capacity:avg_over_time1h
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "rhacs:rox_central_cluster_metrics_cpu_capacity:avg_over_time1h"
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/part-of: observatorium
    name: metric-federation-rules
- apiVersion: v1
  data:
    rw-config.yaml: |-
      "remote_write":
      - "headers":
          "THANOS-TENANT": "0fc2b00e-201b-4c17-b9f2-19d91adc4fd2"
        "name": "receive-rhobs"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "0fc2b00e-201b-4c17-b9f2-19d91adc4fd2"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
        "name": "receive-telemeter"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "AC879303-C60F-4D0D-A6D5-A485CFD638B8"
        "name": "receive-dptp"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "AC879303-C60F-4D0D-A6D5-A485CFD638B8"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "770c1124-6ae8-4324-a9d4-9ce08590094b"
        "name": "receive-osd"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "770c1124-6ae8-4324-a9d4-9ce08590094b"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "63e320cd-622a-4d05-9585-ffd48342633e"
        "name": "receive-managedkafka"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "63e320cd-622a-4d05-9585-ffd48342633e"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "1b9b6e43-9128-4bbf-bfff-3c120bbe6f11"
        "name": "receive-rhacs"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "1b9b6e43-9128-4bbf-bfff-3c120bbe6f11"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "9ca26972-4328-4fe3-92db-31302013d03f"
        "name": "receive-cnvqe"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "9ca26972-4328-4fe3-92db-31302013d03f"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "37b8fd3f-56ff-4b64-8272-917c9b0d1623"
        "name": "receive-psiocp"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "37b8fd3f-56ff-4b64-8272-917c9b0d1623"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "8ace13a2-1c72-4559-b43d-ab43e32a255a"
        "name": "receive-rhods"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "8ace13a2-1c72-4559-b43d-ab43e32a255a"
          "source_labels":
          - "tenant_id"
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/part-of: observatorium
    name: metric-federation-ruler-remote-write-config
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-metric-fed-stateless-rule
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: reloader
      port: 9533
      targetPort: 9533
    selector:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-metric-fed-stateless-rule
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-metric-fed-stateless-rule
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    - port: reloader
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: metric-federation
        app.kubernetes.io/name: thanos-stateless-rule
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: metric-federation
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-metric-fed-stateless-rule
  spec:
    replicas: ${{THANOS_RULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: metric-federation
        app.kubernetes.io/name: thanos-stateless-rule
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-metric-fed-stateless-rule
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: metric-federation
          app.kubernetes.io/name: thanos-stateless-rule
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - rule
          - --log.level=${THANOS_RULER_LOG_LEVEL}
          - --log.format=logfmt
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/rule
          - --label=rule_replica="$(NAME)"
          - --alert.label-drop=rule_replica
          - --tsdb.retention=48h
          - --tsdb.block-duration=2h
          - --query=dnssrv+_http._tcp.observatorium-thanos-query.${THANOS_QUERIER_NAMESPACE}.svc.cluster.local
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-rule"
            "type": "JAEGER"
          - --remote-write.config-file=/etc/thanos/config/metric-federation-ruler-remote-write-config/rw-config.yaml
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 24
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          name: thanos-rule
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          - containerPort: 9533
            name: reloader
          readinessProbe:
            failureThreshold: 18
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_RULER_CPU_LIMIT}
              memory: ${THANOS_RULER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RULER_CPU_REQUEST}
              memory: ${THANOS_RULER_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/rule
            name: data
            readOnly: false
          - mountPath: /etc/thanos/config/metric-federation-ruler-remote-write-config
            name: metric-federation-ruler-remote-write-config
            readOnly: true
        - args:
          - -webhook-url=http://localhost:10902/-/reload
          - -volume-dir=/etc/thanos/config/metric-federation-ruler-remote-write-config
          image: ${CONFIGMAP_RELOADER_IMAGE}:${CONFIGMAP_RELOADER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: configmap-reloader
          volumeMounts:
          - mountPath: /etc/thanos/config/metric-federation-ruler-remote-write-config
            name: metric-federation-ruler-remote-write-config
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: metric-federation-ruler-remote-write-config
          name: metric-federation-ruler-remote-write-config
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: metric-federation
          app.kubernetes.io/name: thanos-stateless-rule
          app.kubernetes.io/part-of: observatorium
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${THANOS_RULER_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  data:
    session_secret: c2VjcmV0
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: alertmanager
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/part-of: observatorium
    name: alertmanager-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: alertmanager-tls
    labels:
      app.kubernetes.io/component: alertmanager
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/part-of: observatorium
    name: observatorium-alertmanager
  spec:
    ports:
    - name: http
      port: 9093
      targetPort: 9093
    - name: https
      port: 8443
      targetPort: 8443
    selector:
      app.kubernetes.io/component: alertmanager
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/part-of: observatorium
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: alertmanager
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-alertmanager
  spec:
    endpoints:
    - port: http
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: alertmanager
        app.kubernetes.io/name: alertmanager
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: alertmanager
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/part-of: observatorium
    name: observatorium-alertmanager
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: alertmanager
        app.kubernetes.io/name: alertmanager
        app.kubernetes.io/part-of: observatorium
    strategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: alertmanager
          app.kubernetes.io/name: alertmanager
          app.kubernetes.io/part-of: observatorium
      spec:
        containers:
        - args:
          - --config.file=/etc/config/alertmanager.yaml
          - --storage.path=/data
          - --web.listen-address=:9093
          - --cluster.listen-address=
          - --log.level=${OBSERVATORIUM_ALERTMANAGER_LOG_LEVEL}
          image: ${OBSERVATORIUM_ALERTMANAGER_IMAGE}:${OBSERVATORIUM_ALERTMANAGER_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /
              port: 9093
              scheme: HTTP
            periodSeconds: 30
          name: observatorium-alertmanager
          ports:
          - containerPort: 9093
            name: http
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9093
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
          resources:
            limits:
              cpu: "4"
              memory: 4Gi
            requests:
              cpu: "1"
              memory: 1Gi
          volumeMounts:
          - mountPath: /data
            name: alertmanager-data
            readOnly: false
          - mountPath: /etc/config
            name: alertmanager-config
            readOnly: true
        - args:
          - -provider=openshift
          - -https-address=:8443
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9093
          - -openshift-service-account=${SERVICE_ACCOUNT_NAME}
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${OAUTH_PROXY_IMAGE}:${OAUTH_PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: alertmanager-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: alertmanager-proxy
            readOnly: false
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - name: alertmanager-data
          persistentVolumeClaim:
            claimName: alertmanager-data
        - name: alertmanager-config
          secret:
            secretName: alertmanager-config
        - name: alertmanager-tls
          secret:
            secretName: alertmanager-tls
        - name: alertmanager-proxy
          secret:
            secretName: alertmanager-proxy
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app.kubernetes.io/name: observatorium-alertmanager
    name: alertmanager-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
- apiVersion: v1
  data:
    observatorium.yaml: |-
      "groups":
      - "interval": "1m"
        "name": "telemeter-telemeter.rules"
        "rules":
        - "expr": |
            count by (name,reason) (cluster_operator_conditions{condition="Degraded"} == 1)
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "name_reason:cluster_operator_degraded:count"
        - "expr": |
            count by (name,reason) (cluster_operator_conditions{condition="Available"} == 0)
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "name_reason:cluster_operator_unavailable:count"
        - "expr": |
            sort_desc(max by (_id,code) (code:apiserver_request_count:rate:sum{code=~"(4|5)\\d\\d"}) > 0.5)
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_code:apiserver_request_error_rate_sum:max"
        - "expr": |
            bottomk by (_id) (1, max by (_id, version) (0 * cluster_version{type="failure"}) or max by (_id, version) (1 + 0 * cluster_version{type="current"}))
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_version:cluster_available"
        - "expr": |
            topk by (_id) (1, max by (_id, managed, ebs_account, internal) (label_replace(label_replace((subscription_labels{support=~"Standard|Premium|Layered"} * 0 + 1) or subscription_labels * 0, "internal", "true", "email_domain", "redhat.com|(.*\\.|^)ibm.com"), "managed", "", "managed", "false")) + on(_id) group_left(version) (topk by (_id) (1, id_version*0)) + on(_id) group_left(install_type) (topk by (_id) (1, id_install_type*0)) + on(_id) group_left(host_type) (topk by (_id) (1, id_primary_host_type*0)) + on(_id) group_left(provider) (topk by (_id) (1, id_provider*0)))
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_version_ebs_account_internal:cluster_subscribed"
        - "expr": |
            0 * (max by (_id,host_type) (topk by (_id) (1, label_replace(label_replace(label_replace(label_replace(label_replace(label_replace(cluster:virt_platform_nodes:sum, "host_type", "$1", "type", "(aws|ibm_.*|ovirt|none|rhev|gcp|openstack|hyperv|vmware)"), "host_type", "virt-unknown", "host_type", ""), "host_type", "kvm-unknown", "type", "kvm"), "host_type", "xen-unknown", "type", "xen.*"), "host_type", "metal", "host_type", "none"), "host_type", "ibm-$1", "host_type", "ibm[_-](power|systemz).*"))) or on(_id) label_replace(max by (_id) (cluster_version{type="current"}), "host_type", "", "host_type", ""))
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_primary_host_type"
        - "expr": |
            0 * topk by (_id) (1, count by (_id, provider) (label_replace(cluster_infrastructure_provider * 0 + 2, "provider", "$1", "type", "(.*)")) or on(_id) label_replace(max by (_id) (cluster_version{type="current"}*0+1), "provider", "", "provider", "") or on(_id) label_replace(max by (_id) (cluster:node_instance_type_count:sum*0), "provider", "hypershift-unknown", "provider", ""))
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_provider"
        - "expr": |
            0 * (max by (_id,version) (topk by (_id) (1, cluster_version{type="current"})) or on(_id) label_replace(max by (_id) (cluster:node_instance_type_count:sum*0), "version", "", "unknown", ""))
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_version"
        - "expr": |
            (
              count by (_id, install_type) (
                label_replace(
                  label_replace(
                    label_replace(
                      label_replace(
                        label_replace(
                          topk by (_id) (1, cluster_installer), "install_type", "upi", "type", "other"
                        ), "install_type", "ipi", "type", "openshift-install"
                      ), "install_type", "hive", "invoker", "hive"
                    ), "install_type", "assisted-installer", "invoker", "assisted-installer"
                  ), "install_type", "infrastructure-operator", "invoker", "assisted-installer-operator"
                )
              ) or on(_id) (
                label_replace(
                  count by (_id) (
                    cluster:virt_platform_nodes:sum
                  ), "install_type", "hypershift-unknown", "install_type", ""
                )
              ) * 0
            ) * 0
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_install_type"
        - "expr": |
            0 * (max by (_id,cloudpak_type) (topk by (_id) (1, count by (_id,cloudpak_type) (label_replace(subscription_sync_total{installed=~"ibm-((licensing|common-service)-operator).*"}, "cloudpak_type", "unknown", "", ".*")))))
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_cloudpak_type"
        - "expr": |
            topk by(_id) (1,
              (label_replace(7+0*count by (_id) (cluster:usage:resources:sum{resource="netnamespaces.network.openshift.io"}), "network_type", "OpenshiftSDN", "", "") > 0) or
              (label_replace(6+0*count by (_id) (cluster:usage:resources:sum{resource="clusterinformations.crd.projectcalico.org"}), "network_type", "Calico", "", "") > 0) or
              (label_replace(5+0*count by (_id) (cluster:usage:resources:sum{resource="acicontainersoperators.aci.ctrl"}), "network_type", "ACI", "", "") > 0) or
              (label_replace(4+0*count by (_id) (cluster:usage:resources:sum{resource="kuryrnetworks.openstack.org"}), "network_type", "Kuryr", "", "") > 0) or
              (label_replace(3+0*count by (_id) (cluster:usage:resources:sum{resource="ciliumendpoints.cilium.io"}), "network_type", "Cilium", "", "") > 0) or
              (label_replace(2+0*count by (_id) (cluster:usage:resources:sum{resource="ncpconfigs.nsx.vmware.com"}), "network_type", "VMWareNSX", "", "") > 0) or
              (label_replace(1+0*count by (_id) (cluster:usage:resources:sum{resource="egressips.k8s.ovn.org"}), "network_type", "OVNKube", "", "")) or
              (label_replace(0+0*max by (_id) (cluster:node_instance_type_count:sum*0), "network_type", "unknown", "", ""))
            )
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "id_network_type"
        - "expr": |
            0 * topk by (ebs_account) (1, max by (ebs_account,account_type,internal,email_domain) (label_replace(label_replace(label_replace(subscription_labels{email_domain="redhat.com"}*0+5, "class", "Internal", "class", ".*") or label_replace(subscription_labels{class!="Customer",email_domain=~"(.*\\.|^)ibm.com"}*0+4, "class", "Internal", "class", ".*") or (subscription_labels{class="Customer"}*0+3) or (subscription_labels{class="Partner"}*0+2) or (subscription_labels{class="Evaluation"}*0+1) or label_replace(subscription_labels{class!~"Evaluation|Customer|Partner"}*0+0, "class", "", "class", ".*"), "account_type", "$1", "class", "(.+)"), "internal", "true", "email_domain", "redhat.com|(.*\\.|^)ibm.com") ))
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "ebs_account_account_type_email_domain_internal"
        - "expr": |
            topk(500, sum (acm_managed_cluster_info) by (managed_cluster_id, cloud, created_via, endpoint, instance, job, namespace, pod, service, vendor, version))
          "labels":
            "tenant_id": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "record": "acm_top500_mcs:acm_managed_cluster_info"
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/part-of: observatorium
    name: observatorium-rules
- apiVersion: v1
  data:
    rw-config.yaml: |-
      "remote_write":
      - "headers":
          "THANOS-TENANT": "0fc2b00e-201b-4c17-b9f2-19d91adc4fd2"
        "name": "receive-rhobs"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "0fc2b00e-201b-4c17-b9f2-19d91adc4fd2"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
        "name": "receive-telemeter"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "FB870BF3-9F3A-44FF-9BF7-D7A047A52F43"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "AC879303-C60F-4D0D-A6D5-A485CFD638B8"
        "name": "receive-dptp"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "AC879303-C60F-4D0D-A6D5-A485CFD638B8"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "770c1124-6ae8-4324-a9d4-9ce08590094b"
        "name": "receive-osd"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "770c1124-6ae8-4324-a9d4-9ce08590094b"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "63e320cd-622a-4d05-9585-ffd48342633e"
        "name": "receive-managedkafka"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "63e320cd-622a-4d05-9585-ffd48342633e"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "1b9b6e43-9128-4bbf-bfff-3c120bbe6f11"
        "name": "receive-rhacs"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "1b9b6e43-9128-4bbf-bfff-3c120bbe6f11"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "9ca26972-4328-4fe3-92db-31302013d03f"
        "name": "receive-cnvqe"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "9ca26972-4328-4fe3-92db-31302013d03f"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "37b8fd3f-56ff-4b64-8272-917c9b0d1623"
        "name": "receive-psiocp"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "37b8fd3f-56ff-4b64-8272-917c9b0d1623"
          "source_labels":
          - "tenant_id"
      - "headers":
          "THANOS-TENANT": "8ace13a2-1c72-4559-b43d-ab43e32a255a"
        "name": "receive-rhods"
        "queue_config":
          "batch_send_deadline": "5s"
          "capacity": 120000
          "max_backoff": "5m"
          "max_samples_per_send": 40000
          "max_shards": 50
          "min_backoff": "5s"
          "min_shards": 1
        "url": "http://observatorium-thanos-receive.${NAMESPACE}.svc.cluster.local:19291/api/v1/receive"
        "write_relabel_configs":
        - "action": "keep"
          "regex": "8ace13a2-1c72-4559-b43d-ab43e32a255a"
          "source_labels":
          - "tenant_id"
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/part-of: observatorium
    name: remote-write-config
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-stateless-rule
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: reloader
      port: 9533
      targetPort: 9533
    selector:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-stateless-rule
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-stateless-rule
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    - port: reloader
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-stateless-rule
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-stateless-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-stateless-rule
  spec:
    replicas: ${{THANOS_RULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-stateless-rule
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-stateless-rule
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-stateless-rule
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - rule
          - --log.level=${THANOS_RULER_LOG_LEVEL}
          - --log.format=logfmt
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/rule
          - --label=rule_replica="$(NAME)"
          - --alert.label-drop=rule_replica
          - --tsdb.retention=48h
          - --tsdb.block-duration=2h
          - --query=dnssrv+_http._tcp.observatorium-thanos-query.${NAMESPACE}.svc.cluster.local
          - --alertmanagers.url=dnssrv+http://observatorium-alertmanager.${NAMESPACE}.svc.cluster.local:9093
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-rule"
            "type": "JAEGER"
          - --remote-write.config-file=/etc/thanos/config/remote-write-config/rw-config.yaml
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 120
          name: thanos-rule
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          - containerPort: 9533
            name: reloader
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 180
          resources:
            limits:
              cpu: ${THANOS_RULER_CPU_LIMIT}
              memory: ${THANOS_RULER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RULER_CPU_REQUEST}
              memory: ${THANOS_RULER_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/rule
            name: data
            readOnly: false
          - mountPath: /etc/thanos/config/remote-write-config
            name: remote-write-config
            readOnly: true
          - mountPath: /etc/thanos/rules/rule-syncer
            name: rule-syncer
        - args:
          - -webhook-url=http://localhost:10902/-/reload
          - -volume-dir=/etc/thanos/config/remote-write-config
          image: ${CONFIGMAP_RELOADER_IMAGE}:${CONFIGMAP_RELOADER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: configmap-reloader
          volumeMounts:
          - mountPath: /etc/thanos/config/remote-write-config
            name: remote-write-config
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        - args:
          - -file=/etc/thanos-rule-syncer/observatorium.yaml
          - -interval=60
          - -rules-backend-url=http://rules-objstore.${OBSERVATORIUM_NAMESPACE}.svc:8080
          - -thanos-rule-url=http://localhost:10902
          image: ${THANOS_RULE_SYNCER_IMAGE}:${THANOS_RULE_SYNCER_IMAGE_TAG}
          name: thanos-rule-syncer
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
          volumeMounts:
          - mountPath: /etc/thanos-rule-syncer
            name: rule-syncer
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: remote-write-config
          name: remote-write-config
        - emptyDir: {}
          name: rule-syncer
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-stateless-rule
          app.kubernetes.io/part-of: observatorium
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${THANOS_RULER_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  data:
    file_sd.yaml: '- targets: ${THANOS_QUERIER_FILE_SD_TARGETS}'
  kind: ConfigMap
  metadata:
    annotations:
      qontract.recycle: "true"
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/part-of: observatorium
    name: thanos-query-file-sd
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query
  spec:
    replicas: ${{THANOS_QUERIER_REPLICAS}}
    securityContext: {}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-layer
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-layer
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-query
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-query
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - query
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:9090
          - --log.level=${THANOS_QUERIER_LOG_LEVEL}
          - --log.format=logfmt
          - --query.replica-label=replica
          - --query.replica-label=rule_replica
          - --query.replica-label=prometheus_replica
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-store-shard-0.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-store-shard-1.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-store-shard-2.${NAMESPACE}.svc.cluster.local
          - --store=dnssrv+_grpc._tcp.observatorium-thanos-receive-default.${NAMESPACE}.svc.cluster.local
          - --rule=dnssrv+_grpc._tcp.observatorium-thanos-rule.${NAMESPACE}.svc.cluster.local
          - --rule=dnssrv+_grpc._tcp.observatorium-thanos-stateless-rule.${NAMESPACE}.svc.cluster.local
          - --rule=dnssrv+_grpc._tcp.observatorium-thanos-metric-federation-rule.${NAMESPACE}.svc.cluster.local
          - --rule=dnssrv+_grpc._tcp.observatorium-thanos-metric-fed-stateless-rule.${NAMESPACE}.svc.cluster.local
          - --web.prefix-header=X-Forwarded-Prefix
          - --query.timeout=15m
          - --query.lookback-delta=15m
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-query"
            "type": "JAEGER"
          - --query.auto-downsampling
          - --store.sd-files=/etc/thanos/sd/file_sd.yaml
          env:
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            periodSeconds: 30
          name: thanos-query
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 9090
            name: http
          - containerPort: 9091
            name: https
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_QUERIER_CPU_LIMIT}
              memory: ${THANOS_QUERIER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_QUERIER_CPU_REQUEST}
              memory: ${THANOS_QUERIER_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /etc/thanos/sd
            name: file-sd
        - args:
          - -provider=openshift
          - -https-address=:9091
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -openshift-service-account=${SERVICE_ACCOUNT_NAME}
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${OAUTH_PROXY_IMAGE}:${OAUTH_PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 9091
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: query-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: query-proxy
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        terminationGracePeriodSeconds: 120
        volumes:
        - configMap:
            name: thanos-query-file-sd
          name: file-sd
        - name: query-tls
          secret:
            secretName: query-tls
        - name: query-proxy
          secret:
            secretName: query-proxy
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: query-range-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-query-range-cache-memcached
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: query-range-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: query-range-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-query-range-cache-memcached
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-thanos-query-range-cache-memcached
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-range-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: query-range-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-query-range-cache-memcached
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: query-range-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-query-range-cache-memcached
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-range-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: memcached
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m ${THANOS_QUERY_FRONTEND_QUERY_CACHE_MEMORY_LIMIT_MB}
          - -I 64m
          - -c ${THANOS_QUERY_FRONTEND_QUERY_CACHE_CONNECTION_LIMIT}
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          resources:
            limits:
              cpu: ${THANOS_QUERY_FRONTEND_QUERY_CACHE_MEMCACHED_CPU_LIMIT}
              memory: ${THANOS_QUERY_FRONTEND_QUERY_CACHE_MEMCACHED_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_QUERY_FRONTEND_QUERY_CACHE_MEMCACHED_CPU_REQUEST}
              memory: ${THANOS_QUERY_FRONTEND_QUERY_CACHE_MEMCACHED_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          resources:
            limits:
              cpu: ${MEMCACHED_EXPORTER_CPU_LIMIT}
              memory: ${MEMCACHED_EXPORTER_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_EXPORTER_CPU_REQUEST}
              memory: ${MEMCACHED_EXPORTER_MEMORY_REQUEST}
        securityContext: {}
        serviceAccountName: observatorium-thanos-query-range-cache-memcached
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query-frontend
  spec:
    replicas: ${{THANOS_QUERY_FRONTEND_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query-frontend
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: query-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-query-frontend
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-query-frontend
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - query-frontend
          - --log.level=info
          - --log.format=logfmt
          - --query-frontend.compress-responses
          - --http-address=0.0.0.0:9090
          - --query-frontend.downstream-url=http://observatorium-thanos-query.${NAMESPACE}.svc.cluster.local.:9090
          - --query-frontend.log-queries-longer-than=${THANOS_QUERY_FRONTEND_LOG_QUERIES_LONGER_THAN}
          - |-
            --query-range.response-cache-config="config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-query-range-cache-memcached.${NAMESPACE}.svc"
              "max_async_buffer_size": 200000
              "max_async_concurrency": 200
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1300
              "max_item_size": "64MiB"
              "timeout": "2s"
            "type": "memcached"
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-query-frontend"
            "type": "JAEGER"
          - --query-range.split-interval=${THANOS_QUERY_FRONTEND_SPLIT_INTERVAL}
          - --labels.split-interval=${THANOS_QUERY_FRONTEND_SPLIT_INTERVAL}
          - --query-range.max-retries-per-request=${THANOS_QUERY_FRONTEND_MAX_RETRIES}
          - --labels.max-retries-per-request=${THANOS_QUERY_FRONTEND_MAX_RETRIES}
          - --labels.default-time-range=336h
          - --cache-compression-type=snappy
          env:
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            periodSeconds: 30
          name: thanos-query-frontend
          ports:
          - containerPort: 9090
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_QUERY_FRONTEND_CPU_LIMIT}
              memory: ${THANOS_QUERY_FRONTEND_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_QUERY_FRONTEND_CPU_REQUEST}
              memory: ${THANOS_QUERY_FRONTEND_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - -provider=openshift
          - -https-address=:9091
          - -http-address=
          - -email-domain=*
          - -upstream=http://localhost:9090
          - -openshift-service-account=${SERVICE_ACCOUNT_NAME}
          - '-openshift-sar={"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}'
          - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - -tls-cert=/etc/tls/private/tls.crt
          - -tls-key=/etc/tls/private/tls.key
          - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -cookie-secret-file=/etc/proxy/secrets/session_secret
          - -openshift-ca=/etc/pki/tls/cert.pem
          - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          image: ${OAUTH_PROXY_IMAGE}:${OAUTH_PROXY_IMAGE_TAG}
          name: oauth-proxy
          ports:
          - containerPort: 9091
            name: https
          resources:
            limits:
              cpu: ${OAUTH_PROXY_CPU_LIMITS}
              memory: ${OAUTH_PROXY_MEMORY_LIMITS}
            requests:
              cpu: ${OAUTH_PROXY_CPU_REQUEST}
              memory: ${OAUTH_PROXY_MEMORY_REQUEST}
          volumeMounts:
          - mountPath: /etc/tls/private
            name: query-frontend-tls
            readOnly: false
          - mountPath: /etc/proxy/secrets
            name: query-frontend-proxy
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        terminationGracePeriodSeconds: 120
        volumes:
        - name: query-frontend-tls
          secret:
            secretName: query-frontend-tls
        - name: query-frontend-proxy
          secret:
            secretName: query-frontend-proxy
- apiVersion: v1
  data:
    session_secret: c2VjcmV0
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: query-frontend-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: query-frontend-tls
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query-frontend
  spec:
    ports:
    - name: http
      port: 9090
      targetPort: 9090
    - name: https
      port: 9091
      targetPort: 9091
    selector:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query-frontend
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: query-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query-frontend
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-query-frontend
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query-frontend
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    session_secret: c2VjcmV0
  kind: Secret
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: query-proxy
  type: Opaque
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: query-tls
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query
  spec:
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 9090
      targetPort: 9090
    - name: https
      port: 9091
      targetPort: 9091
    selector:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-query
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: query-layer
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-query
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-query
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: query-layer
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-query
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  data:
    hashrings.json: |-
      [
        {
          "hashring": "default",
          "tenants": [

          ]
        }
      ]
  kind: ConfigMap
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller-tenants
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: kubernetes-controller
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive-controller
        app.kubernetes.io/part-of: observatorium
    template:
      metadata:
        labels:
          app.kubernetes.io/component: kubernetes-controller
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive-controller
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
      spec:
        containers:
        - args:
          - --configmap-name=observatorium-thanos-receive-controller-tenants
          - --configmap-generated-name=observatorium-thanos-receive-controller-tenants-generated
          - --file-name=hashrings.json
          - --namespace=$(NAMESPACE)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: ${THANOS_RECEIVE_CONTROLLER_IMAGE}:${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
          name: thanos-receive-controller
          ports:
          - containerPort: 8080
            name: http
          resources:
            limits:
              cpu: 64m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 24Mi
          securityContext: {}
        securityContext: {}
        serviceAccount: observatorium-thanos-receive-controller
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
  rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    verbs:
    - list
    - watch
    - get
    - create
    - update
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - list
    - watch
    - get
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: observatorium-thanos-receive-controller
  subjects:
  - kind: ServiceAccount
    name: observatorium-thanos-receive-controller
    namespace: ${NAMESPACE}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
  spec:
    ports:
    - name: http
      port: 8080
      targetPort: 8080
    selector:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: kubernetes-controller
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive-controller
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_RECEIVE_CONTROLLER_IMAGE_TAG}
    name: observatorium-thanos-receive-controller
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-thanos-receive-controller
  spec:
    endpoints:
    - port: http
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: kubernetes-controller
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive-controller
        app.kubernetes.io/part-of: observatorium
- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    name: observatorium-thanos-receive-default
  spec:
    maxUnavailable: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: database-write-hashring
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive
        app.kubernetes.io/part-of: observatorium
        controller.receive.thanos.io/hashring: default
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      controller.receive.thanos.io/hashring: default
    name: observatorium-thanos-receive-default
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: remote-write
      port: 19291
      targetPort: 19291
    selector:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      controller.receive.thanos.io/hashring: default
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      controller.receive.thanos.io: thanos-receive-controller
      controller.receive.thanos.io/hashring: default
    name: observatorium-thanos-receive-default
  spec:
    replicas: ${{THANOS_RECEIVE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-write-hashring
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive
        app.kubernetes.io/part-of: observatorium
        controller.receive.thanos.io/hashring: default
    serviceName: observatorium-thanos-receive-default
    template:
      metadata:
        labels:
          app.kubernetes.io/component: database-write-hashring
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          controller.receive.thanos.io/hashring: default
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-receive
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-receive
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: topology.kubernetes.io/zone
              weight: 100
        containers:
        - args:
          - receive
          - --log.level=${THANOS_RECEIVE_LOG_LEVEL}
          - --log.format=logfmt
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --remote-write.address=0.0.0.0:19291
          - --receive.replication-factor=3
          - --tsdb.path=${THANOS_RECEIVE_TSDB_PATH}
          - --tsdb.retention=4d
          - --label=replica="$(NAME)"
          - --label=receive="true"
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --receive.local-endpoint=$(NAME).observatorium-thanos-receive-default.$(NAMESPACE).svc.cluster.local:10901
          - --receive.hashrings-file=/var/lib/thanos-receive/hashrings.json
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-receive"
            "type": "JAEGER"
          - --receive.default-tenant-id=FB870BF3-9F3A-44FF-9BF7-D7A047A52F43
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: DEBUG
            value: ${THANOS_RECEIVE_DEBUG_ENV}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          - name: DEBUG
            value: ${THANOS_RECEIVE_DEBUG_ENV}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-receive
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          - containerPort: 19291
            name: remote-write
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_RECEIVE_CPU_LIMIT}
              memory: ${THANOS_RECEIVE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RECEIVE_CPU_REQUEST}
              memory: ${THANOS_RECEIVE_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/receive
            name: data
            readOnly: false
          - mountPath: /var/lib/thanos-receive
            name: hashring-config
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        terminationGracePeriodSeconds: 900
        volumes:
        - configMap:
            name: observatorium-thanos-receive-controller-tenants-generated
          name: hashring-config
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: database-write-hashring
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-receive
          app.kubernetes.io/part-of: observatorium
          controller.receive.thanos.io/hashring: default
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${THANOS_RECEIVE_PVC_STORAGE}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
    name: observatorium-thanos-receive
  spec:
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: remote-write
      port: 19291
      targetPort: 19291
    selector:
      app.kubernetes.io/name: thanos-receive
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-receive
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: database-write-hashring
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-receive
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-receive
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: database-write-hashring
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-receive
        app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-rule
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    - name: reloader
      port: 9533
      targetPort: 9533
    selector:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-rule
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-rule
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    - port: reloader
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: rule-evaluation-engine
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-rule
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-rule
  spec:
    replicas: ${{THANOS_RULER_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: rule-evaluation-engine
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-rule
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-rule
    template:
      metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      spec:
        containers:
        - args:
          - rule
          - --log.level=${THANOS_RULER_LOG_LEVEL}
          - --log.format=logfmt
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --data-dir=/var/thanos/rule
          - --label=rule_replica="$(NAME)"
          - --alert.label-drop=rule_replica
          - --tsdb.retention=48h
          - --tsdb.block-duration=2h
          - --query=dnssrv+_http._tcp.observatorium-thanos-query.${NAMESPACE}.svc.cluster.local
          - --rule-file=/etc/thanos/rules/rule-syncer/observatorium.yaml
          - --alertmanagers.url=dnssrv+http://observatorium-alertmanager.${NAMESPACE}.svc.cluster.local:9093
          - --rule-file=/etc/thanos/rules/observatorium-rules/observatorium.yaml
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-rule"
            "type": "JAEGER"
          env:
          - name: NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 120
          name: thanos-rule
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          - containerPort: 9533
            name: reloader
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 180
          resources:
            limits:
              cpu: ${THANOS_RULER_CPU_LIMIT}
              memory: ${THANOS_RULER_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_RULER_CPU_REQUEST}
              memory: ${THANOS_RULER_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/rule
            name: data
            readOnly: false
          - mountPath: /etc/thanos/rules/observatorium-rules
            name: observatorium-rules
          - mountPath: /etc/thanos/rules/rule-syncer
            name: rule-syncer
        - args:
          - -webhook-url=http://localhost:10902/-/reload
          - -volume-dir=/etc/thanos/rules/observatorium-rules
          image: ${CONFIGMAP_RELOADER_IMAGE}:${CONFIGMAP_RELOADER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: configmap-reloader
          volumeMounts:
          - mountPath: /etc/thanos/rules/observatorium-rules
            name: observatorium-rules
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        - args:
          - -file=/etc/thanos-rule-syncer/observatorium.yaml
          - -interval=60
          - -rules-backend-url=http://rules-objstore.${OBSERVATORIUM_NAMESPACE}.svc:8080
          - -thanos-rule-url=http://localhost:10902
          image: ${THANOS_RULE_SYNCER_IMAGE}:${THANOS_RULE_SYNCER_IMAGE_TAG}
          name: thanos-rule-syncer
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
          volumeMounts:
          - mountPath: /etc/thanos-rule-syncer
            name: rule-syncer
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - configMap:
            name: observatorium-rules
          name: observatorium-rules
        - emptyDir: {}
          name: rule-syncer
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: rule-evaluation-engine
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-rule
          app.kubernetes.io/part-of: observatorium
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${THANOS_RULER_PVC_REQUEST}
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: store-bucket-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-bucket-cache-memcached
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: store-bucket-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: store-bucket-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-bucket-cache-memcached
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-thanos-store-bucket-cache-memcached
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: store-bucket-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: store-bucket-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-bucket-cache-memcached
  spec:
    replicas: ${{THANOS_STORE_BUCKET_CACHE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: store-bucket-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-store-bucket-cache-memcached
    template:
      metadata:
        labels:
          app.kubernetes.io/component: store-bucket-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: memcached
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m ${THANOS_STORE_BUCKET_CACHE_MEMORY_LIMIT_MB}
          - -I 1m
          - -c ${THANOS_STORE_BUCKET_CACHE_CONNECTION_LIMIT}
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          resources:
            limits:
              cpu: ${THANOS_STORE_BUCKET_CACHE_MEMCACHED_CPU_LIMIT}
              memory: ${THANOS_STORE_BUCKET_CACHE_MEMCACHED_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_BUCKET_CACHE_MEMCACHED_CPU_REQUEST}
              memory: ${THANOS_STORE_BUCKET_CACHE_MEMCACHED_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          resources:
            limits:
              cpu: ${MEMCACHED_EXPORTER_CPU_LIMIT}
              memory: ${MEMCACHED_EXPORTER_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_EXPORTER_CPU_REQUEST}
              memory: ${MEMCACHED_EXPORTER_MEMORY_REQUEST}
        securityContext: {}
        serviceAccountName: observatorium-thanos-store-bucket-cache-memcached
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: store-index-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-index-cache-memcached
  spec:
    clusterIP: None
    ports:
    - name: client
      port: 11211
      targetPort: 11211
    - name: metrics
      port: 9150
      targetPort: 9150
    selector:
      app.kubernetes.io/component: store-index-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
- apiVersion: v1
  imagePullSecrets:
  - name: quay.io
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: store-index-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-index-cache-memcached
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      prometheus: app-sre
    name: observatorium-thanos-store-index-cache-memcached
  spec:
    endpoints:
    - port: metrics
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: store-index-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: store-index-cache
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: memcached
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
    name: observatorium-thanos-store-index-cache-memcached
  spec:
    replicas: ${{THANOS_STORE_INDEX_CACHE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: store-index-cache
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: memcached
        app.kubernetes.io/part-of: observatorium
    serviceName: observatorium-thanos-store-index-cache-memcached
    template:
      metadata:
        labels:
          app.kubernetes.io/component: store-index-cache
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: memcached
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/version: ${MEMCACHED_IMAGE_TAG}
      spec:
        containers:
        - args:
          - -m ${THANOS_STORE_INDEX_CACHE_MEMORY_LIMIT_MB}
          - -I 5m
          - -c ${THANOS_STORE_INDEX_CACHE_CONNECTION_LIMIT}
          - -v
          image: ${MEMCACHED_IMAGE}:${MEMCACHED_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: memcached
          ports:
          - containerPort: 11211
            name: client
          resources:
            limits:
              cpu: ${THANOS_STORE_INDEX_CACHE_MEMCACHED_CPU_LIMIT}
              memory: ${THANOS_STORE_INDEX_CACHE_MEMCACHED_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_INDEX_CACHE_MEMCACHED_CPU_REQUEST}
              memory: ${THANOS_STORE_INDEX_CACHE_MEMCACHED_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
        - args:
          - --memcached.address=localhost:11211
          - --web.listen-address=0.0.0.0:9150
          image: ${MEMCACHED_EXPORTER_IMAGE}:${MEMCACHED_EXPORTER_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          name: exporter
          ports:
          - containerPort: 9150
            name: metrics
          resources:
            limits:
              cpu: ${MEMCACHED_EXPORTER_CPU_LIMIT}
              memory: ${MEMCACHED_EXPORTER_MEMORY_LIMIT}
            requests:
              cpu: ${MEMCACHED_EXPORTER_CPU_REQUEST}
              memory: ${MEMCACHED_EXPORTER_MEMORY_REQUEST}
        securityContext: {}
        serviceAccountName: observatorium-thanos-store-index-cache-memcached
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
    name: observatorium-thanos-store-shard
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.thanos.io/shard: shard-0
    name: observatorium-thanos-store-shard-0
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      store.thanos.io/shard: shard-0
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.thanos.io/shard: shard-0
    name: observatorium-thanos-store-shard-0
  spec:
    replicas: ${{THANOS_STORE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
        store.thanos.io/shard: shard-0
    serviceName: observatorium-thanos-store-shard-0
    template:
      metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          store.thanos.io/shard: shard-0
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-store
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - store
          - --log.level=${THANOS_STORE_LOG_LEVEL}
          - --log.format=logfmt
          - --data-dir=/var/thanos/store
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --ignore-deletion-marks-delay=24h
          - |-
            --index-cache.config="config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-index-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 2500000
              "max_async_concurrency": 1000
              "max_get_multi_batch_size": 100000
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 2500
              "max_item_size": "5MiB"
              "timeout": "2s"
            "type": "memcached"
          - |-
            --store.caching-bucket.config="blocks_iter_ttl": "5m"
            "chunk_object_attrs_ttl": "24h"
            "chunk_subrange_size": 16000
            "chunk_subrange_ttl": "24h"
            "config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-bucket-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 25000
              "max_async_concurrency": 50
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1100
              "max_item_size": "1MiB"
              "timeout": "2s"
            "max_chunks_get_range_requests": 3
            "metafile_content_ttl": "24h"
            "metafile_doesnt_exist_ttl": "15m"
            "metafile_exists_ttl": "2h"
            "metafile_max_size": "1MiB"
            "type": "memcached"
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-store"
            "type": "JAEGER"
          - |
            --selector.relabel-config=
              - action: hashmod
                source_labels: ["__block_id"]
                target_label: shard
                modulus: 3
              - action: keep
                source_labels: ["shard"]
                regex: 0
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-store
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_STORE_CPU_LIMIT}
              memory: ${THANOS_STORE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_CPU_REQUEST}
              memory: ${THANOS_STORE_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/store
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        terminationGracePeriodSeconds: 120
        volumes: []
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          store.thanos.io/shard: shard-0
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.thanos.io/shard: shard-1
    name: observatorium-thanos-store-shard-1
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      store.thanos.io/shard: shard-1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.thanos.io/shard: shard-1
    name: observatorium-thanos-store-shard-1
  spec:
    replicas: ${{THANOS_STORE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
        store.thanos.io/shard: shard-1
    serviceName: observatorium-thanos-store-shard-1
    template:
      metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          store.thanos.io/shard: shard-1
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-store
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - store
          - --log.level=${THANOS_STORE_LOG_LEVEL}
          - --log.format=logfmt
          - --data-dir=/var/thanos/store
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --ignore-deletion-marks-delay=24h
          - |-
            --index-cache.config="config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-index-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 2500000
              "max_async_concurrency": 1000
              "max_get_multi_batch_size": 100000
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 2500
              "max_item_size": "5MiB"
              "timeout": "2s"
            "type": "memcached"
          - |-
            --store.caching-bucket.config="blocks_iter_ttl": "5m"
            "chunk_object_attrs_ttl": "24h"
            "chunk_subrange_size": 16000
            "chunk_subrange_ttl": "24h"
            "config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-bucket-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 25000
              "max_async_concurrency": 50
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1100
              "max_item_size": "1MiB"
              "timeout": "2s"
            "max_chunks_get_range_requests": 3
            "metafile_content_ttl": "24h"
            "metafile_doesnt_exist_ttl": "15m"
            "metafile_exists_ttl": "2h"
            "metafile_max_size": "1MiB"
            "type": "memcached"
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-store"
            "type": "JAEGER"
          - |
            --selector.relabel-config=
              - action: hashmod
                source_labels: ["__block_id"]
                target_label: shard
                modulus: 3
              - action: keep
                source_labels: ["shard"]
                regex: 1
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-store
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_STORE_CPU_LIMIT}
              memory: ${THANOS_STORE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_CPU_REQUEST}
              memory: ${THANOS_STORE_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/store
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        terminationGracePeriodSeconds: 120
        volumes: []
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          store.thanos.io/shard: shard-1
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: ${STORAGE_CLASS}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.thanos.io/shard: shard-2
    name: observatorium-thanos-store-shard-2
  spec:
    clusterIP: None
    ports:
    - name: grpc
      port: 10901
      targetPort: 10901
    - name: http
      port: 10902
      targetPort: 10902
    selector:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      store.thanos.io/shard: shard-2
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
      store.thanos.io/shard: shard-2
    name: observatorium-thanos-store-shard-2
  spec:
    replicas: ${{THANOS_STORE_REPLICAS}}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
        store.thanos.io/shard: shard-2
    serviceName: observatorium-thanos-store-shard-2
    template:
      metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          app.kubernetes.io/tracing: jaeger-agent
          app.kubernetes.io/version: ${THANOS_IMAGE_TAG}
          store.thanos.io/shard: shard-2
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - thanos-store
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - observatorium
                namespaces:
                - ${NAMESPACE}
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - store
          - --log.level=${THANOS_STORE_LOG_LEVEL}
          - --log.format=logfmt
          - --data-dir=/var/thanos/store
          - --grpc-address=0.0.0.0:10901
          - --http-address=0.0.0.0:10902
          - --objstore.config=$(OBJSTORE_CONFIG)
          - --ignore-deletion-marks-delay=24h
          - |-
            --index-cache.config="config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-index-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 2500000
              "max_async_concurrency": 1000
              "max_get_multi_batch_size": 100000
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 2500
              "max_item_size": "5MiB"
              "timeout": "2s"
            "type": "memcached"
          - |-
            --store.caching-bucket.config="blocks_iter_ttl": "5m"
            "chunk_object_attrs_ttl": "24h"
            "chunk_subrange_size": 16000
            "chunk_subrange_ttl": "24h"
            "config":
              "addresses":
              - "dnssrv+_client._tcp.observatorium-thanos-store-bucket-cache-memcached.${NAMESPACE}.svc"
              "dns_provider_update_interval": "10s"
              "max_async_buffer_size": 25000
              "max_async_concurrency": 50
              "max_get_multi_batch_size": 100
              "max_get_multi_concurrency": 1000
              "max_idle_connections": 1100
              "max_item_size": "1MiB"
              "timeout": "2s"
            "max_chunks_get_range_requests": 3
            "metafile_content_ttl": "24h"
            "metafile_doesnt_exist_ttl": "15m"
            "metafile_exists_ttl": "2h"
            "metafile_max_size": "1MiB"
            "type": "memcached"
          - |-
            --tracing.config="config":
              "sampler_param": 2
              "sampler_type": "ratelimiting"
              "service_name": "thanos-store"
            "type": "JAEGER"
          - |
            --selector.relabel-config=
              - action: hashmod
                source_labels: ["__block_id"]
                target_label: shard
                modulus: 3
              - action: keep
                source_labels: ["shard"]
                regex: 2
          env:
          - name: OBJSTORE_CONFIG
            valueFrom:
              secretKeyRef:
                key: thanos.yaml
                name: ${THANOS_CONFIG_SECRET}
          - name: HOST_IP_ADDRESS
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: ${THANOS_S3_SECRET}
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: ${THANOS_S3_SECRET}
          image: ${THANOS_IMAGE}:${THANOS_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /-/healthy
              port: 10902
              scheme: HTTP
            periodSeconds: 30
          name: thanos-store
          ports:
          - containerPort: 10901
            name: grpc
          - containerPort: 10902
            name: http
          readinessProbe:
            failureThreshold: 20
            httpGet:
              path: /-/ready
              port: 10902
              scheme: HTTP
            periodSeconds: 5
          resources:
            limits:
              cpu: ${THANOS_STORE_CPU_LIMIT}
              memory: ${THANOS_STORE_MEMORY_LIMIT}
            requests:
              cpu: ${THANOS_STORE_CPU_REQUEST}
              memory: ${THANOS_STORE_MEMORY_REQUEST}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /var/thanos/store
            name: data
            readOnly: false
        - args:
          - --reporter.grpc.host-port=dns:///jaeger-collector-headless.${JAEGER_COLLECTOR_NAMESPACE}.svc:14250
          - --reporter.type=grpc
          - --agent.tags=pod.namespace=$(NAMESPACE),pod.name=$(POD)
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          image: ${JAEGER_AGENT_IMAGE}:${JAEGER_AGENT_IMAGE_TAG}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 14271
              scheme: HTTP
          name: jaeger-agent
          ports:
          - containerPort: 5778
            name: configs
          - containerPort: 6831
            name: jaeger-thrift
          - containerPort: 14271
            name: metrics
          resources:
            limits:
              cpu: 128m
              memory: 128Mi
            requests:
              cpu: 32m
              memory: 64Mi
        nodeSelector:
          kubernetes.io/os: linux
        securityContext: {}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        terminationGracePeriodSeconds: 120
        volumes: []
    volumeClaimTemplates:
    - metadata:
        labels:
          app.kubernetes.io/component: object-store-gateway
          app.kubernetes.io/instance: observatorium
          app.kubernetes.io/name: thanos-store
          app.kubernetes.io/part-of: observatorium
          store.thanos.io/shard: shard-2
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 50Gi
        storageClassName: ${STORAGE_CLASS}
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      app.kubernetes.io/component: object-store-gateway
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: thanos-store
      app.kubernetes.io/part-of: observatorium
      prometheus: app-sre
    name: observatorium-thanos-store-shard
  spec:
    endpoints:
    - port: http
      relabelings:
      - separator: /
        sourceLabels:
        - namespace
        - pod
        targetLabel: instance
    namespaceSelector:
      matchNames: ${{NAMESPACES}}
    selector:
      matchLabels:
        app.kubernetes.io/component: object-store-gateway
        app.kubernetes.io/instance: observatorium
        app.kubernetes.io/name: thanos-store
        app.kubernetes.io/part-of: observatorium
- apiVersion: jaegertracing.io/v1
  kind: Jaeger
  metadata:
    labels:
      app.kubernetes.io/component: rhobs
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/part-of: observatorium
    name: observatorium-jaeger-rhobs
  spec:
    strategy: allinone
- apiVersion: jaegertracing.io/v1
  kind: Jaeger
  metadata:
    labels:
      app.kubernetes.io/component: telemeter
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/part-of: observatorium
    name: observatorium-jaeger-telemeter
  spec:
    strategy: allinone
- apiVersion: opentelemetry.io/v1alpha1
  kind: OpenTelemetryCollector
  metadata:
    labels:
      app.kubernetes.io/component: jaeger
      app.kubernetes.io/instance: observatorium
      app.kubernetes.io/name: otelcol
      app.kubernetes.io/part-of: observatorium
    name: observatorium-otel
  spec:
    config: |-
      exporters:
        jaeger/rhobs:
          endpoint: "observatorium-jaeger-rhobs-collector.${NAMESPACE}.svc.cluster.local:14250"
          tls:
            insecure: true
        jaeger/telemeter:
          endpoint: "observatorium-jaeger-telemeter-collector.${NAMESPACE}.svc.cluster.local:14250"
          tls:
            insecure: true
      processors:
        routing:
          from_attribute: "X-Tenant"
          table:
          - exporters:
            - "jaeger/rhobs"
            value: "rhobs"
          - exporters:
            - "jaeger/telemeter"
            value: "telemeter"
      receivers:
        otlp:
          protocols:
            grpc: {}
      service:
        pipelines:
          traces:
            exporters:
            - "jaeger/rhobs"
            - "jaeger/telemeter"
            processors:
            - "routing"
            receivers:
            - "otlp"
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.46.0
    mode: deployment
parameters:
- name: NAMESPACE
  value: observatorium
- name: NAMESPACES
  value: '["telemeter", "observatorium-metrics", "observatorium-mst-production"]'
- name: OBSERVATORIUM_METRICS_NAMESPACE
  value: observatorium-metrics
- name: OBSERVATORIUM_LOGS_NAMESPACE
  value: observatorium-logs
- name: OBSERVATORIUM_TRACES_NAMESPACE
  value: observatorium-traces
- name: AMS_URL
  value: https://api.openshift.com
- name: CNVQE_ORGANIZATION_ID
  value: ""
- name: DPTP_ORGANIZATION_ID
  value: ""
- name: GUBERNATOR_CPU_LIMIT
  value: 200m
- name: GUBERNATOR_CPU_REQUEST
  value: 100m
- name: GUBERNATOR_IMAGE_TAG
  value: 1.0.0-rc.1
- name: GUBERNATOR_IMAGE
  value: quay.io/app-sre/gubernator
- name: GUBERNATOR_MEMORY_LIMIT
  value: 200Mi
- name: GUBERNATOR_MEMORY_REQUEST
  value: 100Mi
- name: GUBERNATOR_REPLICAS
  value: "2"
- name: JAEGER_AGENT_IMAGE_TAG
  value: 1.29.0
- name: JAEGER_AGENT_IMAGE
  value: jaegertracing/jaeger-agent
- name: JAEGER_COLLECTOR_NAMESPACE
  value: $(NAMESPACE)
- name: MANAGEDKAFKA_ORGANIZATION_ID
  value: ""
- name: MEMCACHED_CONNECTION_LIMIT
  value: "3072"
- name: MEMCACHED_CPU_LIMIT
  value: "3"
- name: MEMCACHED_CPU_REQUEST
  value: 500m
- name: MEMCACHED_EXPORTER_CPU_LIMIT
  value: 200m
- name: MEMCACHED_EXPORTER_CPU_REQUEST
  value: 50m
- name: MEMCACHED_EXPORTER_IMAGE_TAG
  value: v0.6.0
- name: MEMCACHED_EXPORTER_IMAGE
  value: docker.io/prom/memcached-exporter
- name: MEMCACHED_EXPORTER_MEMORY_LIMIT
  value: 200Mi
- name: MEMCACHED_EXPORTER_MEMORY_REQUEST
  value: 50Mi
- name: MEMCACHED_IMAGE_TAG
  value: 1.6.13-alpine
- name: MEMCACHED_IMAGE
  value: docker.io/memcached
- name: MEMCACHED_MEMORY_LIMIT_MB
  value: "2048"
- name: MEMCACHED_MEMORY_LIMIT
  value: 1844Mi
- name: MEMCACHED_MEMORY_REQUEST
  value: 1329Mi
- name: OAUTH_PROXY_CPU_LIMITS
  value: 200m
- name: OAUTH_PROXY_CPU_REQUEST
  value: 100m
- name: OAUTH_PROXY_IMAGE_TAG
  value: 4.7.0
- name: OAUTH_PROXY_IMAGE
  value: quay.io/openshift/origin-oauth-proxy
- name: OAUTH_PROXY_MEMORY_LIMITS
  value: 200Mi
- name: OAUTH_PROXY_MEMORY_REQUEST
  value: 100Mi
- name: OBSERVATORIUM_API_CPU_LIMIT
  value: "1"
- name: OBSERVATORIUM_API_CPU_REQUEST
  value: 100m
- name: OBSERVATORIUM_API_IDENTIFIER
  value: observatorium-observatorium-api
- name: OBSERVATORIUM_API_IMAGE_TAG
  value: main-2022-01-05-v0.1.2-108-gf8b0fbf
- name: OBSERVATORIUM_API_IMAGE
  value: quay.io/observatorium/api
- name: OBSERVATORIUM_API_MEMORY_LIMIT
  value: 1Gi
- name: OBSERVATORIUM_API_MEMORY_REQUEST
  value: 256Mi
- name: OBSERVATORIUM_API_REPLICAS
  value: "3"
- name: OBSERVATORIUM_API_PER_POD_CONCURRENT_REQUETST_LIMIT
  value: "50"
- name: OPA_AMS_CPU_LIMIT
  value: 200m
- name: OPA_AMS_CPU_REQUEST
  value: 100m
- name: OPA_AMS_IMAGE_TAG
  value: master-2021-07-14-d517f70
- name: OPA_AMS_IMAGE
  value: quay.io/observatorium/opa-ams
- name: OPA_AMS_MEMCACHED_EXPIRE
  value: "300"
- name: OPA_AMS_MEMORY_LIMIT
  value: 200Mi
- name: OPA_AMS_MEMORY_REQUEST
  value: 100Mi
- name: OSD_ORGANIZATION_ID
  value: ""
- name: RULES_OBJSTORE_IMAGE
  value: quay.io/observatorium/rules-objstore
- name: RULES_OBJSTORE_IMAGE_TAG
  value: main-2022-04-01-64cd17e
- name: RULES_OBJSTORE_S3_SECRET
  value: rules-objstore-stage-s3
- name: RULES_OBJSTORE_SECRET
  value: rules-objstore
- name: SERVICE_ACCOUNT_NAME
  value: prometheus-telemeter
- name: UP_CPU_REQUEST
  value: 100m
- name: UP_CPU_LIMIT
  value: 500m
- name: UP_MEMORY_REQUEST
  value: 1Gi
- name: UP_MEMORY_LIMIT
  value: 2Gi
